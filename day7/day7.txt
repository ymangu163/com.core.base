1》 多线程下载
① 怎么获得文件的总大小
② 怎么确定每个线程下载的大小，从哪开始下载 到哪下载结束
③ 怎么把每个线程的大小写到文件中去
④  下载前应该检测一下SDcard 空间够不够
⑤ 动态添加进度条(有几个线程 显示几个进度条)
⑥ 下载完后 清除进度条

1. 进度条 可以在 子每种中更新 ---- 内部维护了 Handler  与 Message
2. Android 中子线程 3~5 个比较合理，不是越多越好。
拿单核举例，它是CPU 不断切换去执行子线程，线程太多  大部分时间花在切换上了。



2》断点下载
 ① 每个线程 把已下载的大小积存到一个 “.txt” 文件中 -----(专业点的作法：写到数据库中)
 ②  打开文件以“rwd” 方式打开，这样就会刷到磁盘中 而不仅是缓冲区 (rw方式 )
 ③  每次写入的大小  [1024*1024]  缓冲越小 就越慢，因为定写入磁盘的次数更多
 ④  如果断点下载的过程中再 中断了，业务逻辑
 ⑤  下载完成后，删除临时文件 --- 在哪删除？ 文件占用不能被删除？
 ⑥ 自定义子线程个数时，原来是5，中断后，再改成3  再断点下载就会出问题？怎么解决呢？
断点下载后 子线程个数不能改，如果改了就重载开始下载。



1. Message.obtain()  与 new Message() 的区别？
答： Message.obtain()  会去检测消息池里有没有旧的消息，如果有就拿来用；没有再new Message()。
这样可以减少创建 消息的对象。
 

3》 解决了我动态布局弱点
① 在需要动态布局的地方加个 <LinearLayout>
② 把需要加进这个 <LinearLayout> 的view 写在一个layout布局中(外面不需要再套一层了)；然后用 inflater转换成view
③ 调用  ll.addvView() ,把上面的view 加入到 <LinearLayout> 中，就行了。



提高效率  -----  使用开源项目来实现断点下载
1. xUtils


第5代 自然语言    打 酱油  (动+名)

显示意图 ---  直接指定谁来执行  (激活自己的应用中的组件)
隐式意图 ---  指定动作、数据 ，不关心由谁来执行
 所以 <intent-infliter> 中要指定 action -- 动作，data --- 数据 ,miniType --- 类型，指定打的是酱油，
Category --- 附加的数据，说明 在什么情况下去打酱油

setData() 和 setType() 会互相清除对方的数据，怎么做到既指定 Data 又指定 Type 呢？
setDataAndType()

隐式意图 的好处：----  应用程序之间没有耦合
 当两个Activity 的 <intent-infliter> 一样时，就会弹出一个框 让你选择用哪个程序打开。同一意图 就关联了两个 Activity.  如  下载了几个视频播放器，点开一个视频文件就会弹出好多选择。

4》一个新知识点：
 TextView 中也可以添加图片，在布局中加入 android:drawableLeft="@drawable/xx"  就可以在内容上下左右指定 图片。









